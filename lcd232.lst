CCS PCM C Compiler, Version 5.008, 5967               27-fev-15 17:19

               Filename:   D:\Projetos\LCD232\lcd232.lst

               ROM used:   416 words (20%)
                           Largest free fragment is 1632
               RAM used:   57 (25%) at main() level
                           67 (30%) worst case
               Stack used: 4 locations (3 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   12A
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   7F,W
0009:  MOVWF  20
000A:  MOVF   0A,W
000B:  MOVWF  27
000C:  CLRF   0A
000D:  SWAPF  20,F
000E:  MOVF   04,W
000F:  MOVWF  22
0010:  MOVF   77,W
0011:  MOVWF  23
0012:  MOVF   78,W
0013:  MOVWF  24
0014:  MOVF   79,W
0015:  MOVWF  25
0016:  MOVF   7A,W
0017:  MOVWF  26
0018:  BCF    03.7
0019:  BCF    03.5
001A:  MOVLW  8C
001B:  MOVWF  04
001C:  BTFSS  00.5
001D:  GOTO   020
001E:  BTFSC  0C.5
001F:  GOTO   03D
0020:  MOVLW  8C
0021:  MOVWF  04
0022:  BTFSS  00.0
0023:  GOTO   026
0024:  BTFSC  0C.0
0025:  GOTO   037
0026:  MOVF   22,W
0027:  MOVWF  04
0028:  MOVF   23,W
0029:  MOVWF  77
002A:  MOVF   24,W
002B:  MOVWF  78
002C:  MOVF   25,W
002D:  MOVWF  79
002E:  MOVF   26,W
002F:  MOVWF  7A
0030:  MOVF   27,W
0031:  MOVWF  0A
0032:  SWAPF  21,W
0033:  MOVWF  03
0034:  SWAPF  7F,F
0035:  SWAPF  7F,W
0036:  RETFIE
.................... /* 
....................  * lcd232.c 
....................  * 
....................  *  Created on: 01/10/2012 
....................  *      Author: cuki 
....................  */ 
....................  
.................... #include<16F628A.h> 
.................... //////// Standard Header file for the PIC16F628A device //////////////// 
.................... #device PIC16F628A 
....................  
.................... #list 
....................  
.................... #zero_ram 
....................  
.................... #fuses NOWDT,NOPUT,INTRC_IO,MCLR,NOBROWNOUT,NOLVP,NOCPD,NOPROTECT 
.................... #use delay(clock=4MHz) 
*
0054:  MOVLW  5A
0055:  MOVWF  04
0056:  BCF    03.7
0057:  MOVF   00,W
0058:  BTFSC  03.2
0059:  GOTO   068
005A:  MOVLW  01
005B:  MOVWF  78
005C:  CLRF   77
005D:  DECFSZ 77,F
005E:  GOTO   05D
005F:  DECFSZ 78,F
0060:  GOTO   05C
0061:  MOVLW  4A
0062:  MOVWF  77
0063:  DECFSZ 77,F
0064:  GOTO   063
0065:  GOTO   066
0066:  DECFSZ 00,F
0067:  GOTO   05A
0068:  RETURN
.................... #use rs232(baud=9600,xmit=pin_b2,rcv=pin_b1) 
....................  
.................... #include "lcd_4b.c" 
.................... #define rs PIN_A2 
.................... #define en PIN_A3 
.................... #define d4 PIN_A6 
.................... #define d5 PIN_A7 
.................... #define d6 PIN_A0 
.................... #define d7 PIN_A1 
....................  
.................... void lcd_cmd(int cmd) { 
.................... 	output_bit(d4, bit_test(cmd, 0)); 
0069:  BTFSC  5B.0
006A:  GOTO   06D
006B:  BCF    05.6
006C:  GOTO   06E
006D:  BSF    05.6
006E:  BSF    03.5
006F:  BCF    05.6
.................... 	output_bit(d5, bit_test(cmd, 1)); 
0070:  BCF    03.5
0071:  BTFSC  5B.1
0072:  GOTO   075
0073:  BCF    05.7
0074:  GOTO   076
0075:  BSF    05.7
0076:  BSF    03.5
0077:  BCF    05.7
.................... 	output_bit(d6, bit_test(cmd, 2)); 
0078:  BCF    03.5
0079:  BTFSC  5B.2
007A:  GOTO   07D
007B:  BCF    05.0
007C:  GOTO   07E
007D:  BSF    05.0
007E:  BSF    03.5
007F:  BCF    05.0
.................... 	output_bit(d7, bit_test(cmd, 3)); 
0080:  BCF    03.5
0081:  BTFSC  5B.3
0082:  GOTO   085
0083:  BCF    05.1
0084:  GOTO   086
0085:  BSF    05.1
0086:  BSF    03.5
0087:  BCF    05.1
.................... 	output_high(en); 
0088:  BCF    05.3
0089:  BCF    03.5
008A:  BSF    05.3
.................... 	output_low(en); 
008B:  BSF    03.5
008C:  BCF    05.3
008D:  BCF    03.5
008E:  BCF    05.3
008F:  RETURN
.................... } 
....................  
.................... void lcd_envia_byte(short endereco, int dado) { 
.................... 	output_low(rs); 
0090:  BSF    03.5
0091:  BCF    05.2
0092:  BCF    03.5
0093:  BCF    05.2
.................... 	output_bit(rs, endereco); 
0094:  MOVF   58,F
0095:  BTFSS  03.2
0096:  GOTO   099
0097:  BCF    05.2
0098:  GOTO   09A
0099:  BSF    05.2
009A:  BSF    03.5
009B:  BCF    05.2
.................... 	delay_us(100); 
009C:  MOVLW  20
009D:  MOVWF  77
009E:  DECFSZ 77,F
009F:  GOTO   09E
00A0:  GOTO   0A1
00A1:  NOP
.................... 	output_low(en); 
00A2:  BCF    05.3
00A3:  BCF    03.5
00A4:  BCF    05.3
.................... 	lcd_cmd(dado >> 4); 
00A5:  SWAPF  59,W
00A6:  MOVWF  5A
00A7:  MOVLW  0F
00A8:  ANDWF  5A,F
00A9:  MOVF   5A,W
00AA:  MOVWF  5B
00AB:  CALL   069
.................... 	lcd_cmd(dado & 0x0f); 
00AC:  MOVF   59,W
00AD:  ANDLW  0F
00AE:  MOVWF  5A
00AF:  MOVWF  5B
00B0:  CALL   069
.................... 	delay_ms(1); 
00B1:  MOVLW  01
00B2:  MOVWF  5A
00B3:  CALL   054
00B4:  RETURN
.................... } 
....................  
.................... void lcd_pos_xy(int x, int y) { 
.................... 	int endereco; 
.................... 	if (y != 1) 
*
010F:  DECFSZ 56,W
0110:  GOTO   112
0111:  GOTO   115
.................... 		endereco = 0xc0; 
0112:  MOVLW  C0
0113:  MOVWF  57
0114:  GOTO   117
.................... 	else 
.................... 		endereco = 0x80; 
0115:  MOVLW  80
0116:  MOVWF  57
.................... 	endereco += x - 1; 
0117:  MOVLW  01
0118:  SUBWF  55,W
0119:  ADDWF  57,F
.................... 	lcd_envia_byte(0, endereco); 
011A:  CLRF   58
011B:  MOVF   57,W
011C:  MOVWF  59
011D:  CALL   090
.................... } 
....................  
.................... void lcd(char c) { 
.................... 	switch (c) { 
*
00F5:  MOVF   54,W
00F6:  XORLW  0C
00F7:  BTFSC  03.2
00F8:  GOTO   103
00F9:  XORLW  06
00FA:  BTFSC  03.2
00FB:  GOTO   10B
00FC:  XORLW  07
00FD:  BTFSC  03.2
00FE:  GOTO   10B
00FF:  XORLW  05
0100:  BTFSC  03.2
0101:  GOTO   11F
0102:  GOTO   124
.................... 	case '\f': 
.................... 		lcd_envia_byte(0, 1);     // 0,1 
0103:  CLRF   58
0104:  MOVLW  01
0105:  MOVWF  59
0106:  CALL   090
.................... 		delay_ms(2); 
0107:  MOVLW  02
0108:  MOVWF  5A
0109:  CALL   054
.................... 		break; 
010A:  GOTO   129
.................... 	case '\n': 
.................... 	case '\r': 
.................... 		lcd_pos_xy(1, 2);      // 1,2  COLUNA,LINHA 
010B:  MOVLW  01
010C:  MOVWF  55
010D:  MOVLW  02
010E:  MOVWF  56
.................... 		break; 
*
011E:  GOTO   129
.................... 	case '\b': 
.................... 		lcd_envia_byte(0, 0x10); 
011F:  CLRF   58
0120:  MOVLW  10
0121:  MOVWF  59
0122:  CALL   090
.................... 		break; 
0123:  GOTO   129
.................... 	default: 
.................... 		lcd_envia_byte(1, c); 
0124:  MOVLW  01
0125:  MOVWF  58
0126:  MOVF   54,W
0127:  MOVWF  59
0128:  CALL   090
.................... 		break; 
.................... 	} 
0129:  GOTO   17B (RETURN)
.................... } 
....................  
.................... void lcd_init() { 
....................  
.................... 	int conta; 
....................  
.................... 	output_low(rs); 
*
00B5:  BSF    03.5
00B6:  BCF    05.2
00B7:  BCF    03.5
00B8:  BCF    05.2
.................... 	output_low(en); 
00B9:  BSF    03.5
00BA:  BCF    05.3
00BB:  BCF    03.5
00BC:  BCF    05.3
.................... 	output_low(d4); 
00BD:  BSF    03.5
00BE:  BCF    05.6
00BF:  BCF    03.5
00C0:  BCF    05.6
.................... 	output_low(d5); 
00C1:  BSF    03.5
00C2:  BCF    05.7
00C3:  BCF    03.5
00C4:  BCF    05.7
.................... 	output_low(d6); 
00C5:  BSF    03.5
00C6:  BCF    05.0
00C7:  BCF    03.5
00C8:  BCF    05.0
.................... 	output_low(d7); 
00C9:  BSF    03.5
00CA:  BCF    05.1
00CB:  BCF    03.5
00CC:  BCF    05.1
....................  
.................... 	delay_ms(15); 
00CD:  MOVLW  0F
00CE:  MOVWF  5A
00CF:  CALL   054
....................  
.................... 	for (conta = 1; conta <= 3; conta++) { 
00D0:  MOVLW  01
00D1:  MOVWF  52
00D2:  MOVF   52,W
00D3:  SUBLW  03
00D4:  BTFSS  03.0
00D5:  GOTO   0DE
.................... 		lcd_cmd(0x03); 
00D6:  MOVLW  03
00D7:  MOVWF  5B
00D8:  CALL   069
.................... 		delay_ms(5); 
00D9:  MOVLW  05
00DA:  MOVWF  5A
00DB:  CALL   054
00DC:  INCF   52,F
00DD:  GOTO   0D2
.................... 	} 
.................... 	lcd_cmd(0x02);           //escreve comando para interface de 4 vias de dados 
00DE:  MOVLW  02
00DF:  MOVWF  5B
00E0:  CALL   069
.................... 	lcd_envia_byte(0, 0x28); //escreve comando informando lcd de 2 linhas (5x7) em 4bits 
00E1:  CLRF   58
00E2:  MOVLW  28
00E3:  MOVWF  59
00E4:  CALL   090
.................... 	lcd_envia_byte(0, 0x0c); //escreve comando para limpar todo o display 
00E5:  CLRF   58
00E6:  MOVLW  0C
00E7:  MOVWF  59
00E8:  CALL   090
.................... 	lcd_envia_byte(0, 0x01); //escreve comando para ligar o display **com cursor piscante 
00E9:  CLRF   58
00EA:  MOVLW  01
00EB:  MOVWF  59
00EC:  CALL   090
.................... 	lcd_envia_byte(0, 0x06); //escreve comando para incrementar automaticamente á direita 
00ED:  CLRF   58
00EE:  MOVLW  06
00EF:  MOVWF  59
00F0:  CALL   090
.................... 	delay_ms(5); 
00F1:  MOVLW  05
00F2:  MOVWF  5A
00F3:  CALL   054
00F4:  GOTO   160 (RETURN)
.................... } 
....................  
....................  
....................  
.................... #define max 40 
.................... #define T1_ON T1_INTERNAL|T1_DIV_BY_1 
....................  
.................... short write = 1; 
.................... int buffer[max]; 
.................... int line = 0; 
....................  
.................... #INT_TIMER1 
.................... void isr_timer1() { 
.................... 	clear_interrupt(INT_TIMER1); 
*
0037:  BCF    0C.0
.................... 	setup_timer_1(T1_DISABLED); 
0038:  CLRF   10
.................... 	write = TRUE; 
0039:  BSF    28.0
.................... } 
....................  
003A:  BCF    0C.0
003B:  BCF    0A.3
003C:  GOTO   026
.................... #int_rda 
.................... void serial_isr() { 
.................... 	clear_interrupt(INT_RDA); 
003D:  BCF    0C.5
.................... 	buffer[line++] = getc(); 
003E:  MOVF   51,W
003F:  INCF   51,F
0040:  ADDLW  29
0041:  MOVWF  04
0042:  BCF    03.7
0043:  BTFSS  0C.5
0044:  GOTO   043
0045:  MOVF   1A,W
0046:  MOVWF  00
.................... 	buffer[line] = '\0'; 
0047:  MOVLW  29
0048:  ADDWF  51,W
0049:  MOVWF  04
004A:  BCF    03.7
004B:  CLRF   00
.................... 	set_timer1(0); 
004C:  CLRF   0E
004D:  CLRF   0F
004E:  CLRF   0E
.................... 	setup_timer_1(T1_ON); 
004F:  MOVLW  85
0050:  MOVWF  10
0051:  BCF    0C.5
0052:  BCF    0A.3
0053:  GOTO   026
.................... } 
....................  
.................... int main(void) { 
*
012A:  MOVF   03,W
012B:  ANDLW  1F
012C:  MOVWF  03
012D:  MOVLW  57
012E:  MOVWF  77
012F:  MOVLW  20
0130:  MOVWF  04
0131:  BCF    03.7
0132:  CLRF   00
0133:  INCF   04,F
0134:  DECFSZ 77,F
0135:  GOTO   132
0136:  CLRF   78
0137:  CLRF   79
0138:  CLRF   7A
0139:  CLRF   7B
013A:  CLRF   7C
013B:  CLRF   7D
013C:  CLRF   7E
013D:  MOVLW  50
013E:  MOVWF  77
013F:  MOVLW  A0
0140:  MOVWF  04
0141:  BCF    03.7
0142:  CLRF   00
0143:  INCF   04,F
0144:  DECFSZ 77,F
0145:  GOTO   142
0146:  MOVLW  30
0147:  MOVWF  77
0148:  MOVLW  20
0149:  MOVWF  04
014A:  BSF    03.7
014B:  CLRF   00
014C:  INCF   04,F
014D:  DECFSZ 77,F
014E:  GOTO   14B
014F:  BCF    03.7
0150:  CLRF   20
0151:  BSF    03.5
0152:  BSF    0E.3
0153:  MOVLW  19
0154:  MOVWF  19
0155:  MOVLW  A6
0156:  MOVWF  18
0157:  MOVLW  90
0158:  BCF    03.5
0159:  MOVWF  18
015A:  BSF    28.0
015B:  CLRF   51
015C:  MOVLW  07
015D:  MOVWF  1F
015E:  BCF    03.7
....................  
.................... 	lcd_init(); 
015F:  GOTO   0B5
....................  
.................... 	clear_interrupt(INT_TIMER1); 
0160:  BCF    0C.0
.................... 	clear_interrupt(INT_RDA); 
0161:  BCF    0C.5
.................... 	enable_interrupts(INT_RDA); 
0162:  BSF    03.5
0163:  BSF    0C.5
.................... 	enable_interrupts(INT_TIMER1); 
0164:  BSF    0C.0
.................... 	enable_interrupts(GLOBAL); 
0165:  MOVLW  C0
0166:  BCF    03.5
0167:  IORWF  0B,F
....................  
.................... 	while (TRUE) { 
.................... 		if (write) { 
0168:  BTFSS  28.0
0169:  GOTO   19C
.................... 			write = 0; 
016A:  BCF    28.0
.................... 			printf(lcd, "%s", buffer); 
016B:  MOVLW  29
016C:  MOVWF  04
016D:  BCF    03.7
016E:  MOVLW  00
016F:  IORWF  00,W
0170:  BTFSC  03.2
0171:  GOTO   182
0172:  CLRF   53
0173:  MOVF   04,W
0174:  MOVWF  52
0175:  BCF    53.0
0176:  BTFSC  03.7
0177:  BSF    53.0
0178:  MOVF   00,W
0179:  MOVWF  54
017A:  GOTO   0F5
017B:  MOVF   52,W
017C:  MOVWF  04
017D:  BCF    03.7
017E:  BTFSC  53.0
017F:  BSF    03.7
0180:  INCF   04,F
0181:  GOTO   16E
.................... 			printf("%s", buffer); 
0182:  MOVLW  29
0183:  MOVWF  04
0184:  BCF    03.7
0185:  MOVLW  00
0186:  IORWF  00,W
0187:  BTFSC  03.2
0188:  GOTO   18F
0189:  MOVF   00,W
018A:  BTFSS  0C.4
018B:  GOTO   18A
018C:  MOVWF  19
018D:  INCF   04,F
018E:  GOTO   185
.................... 			for (line = 0; line < max; line++) 
018F:  CLRF   51
0190:  MOVF   51,W
0191:  SUBLW  27
0192:  BTFSS  03.0
0193:  GOTO   19B
.................... 				buffer[line] = '\0'; 
0194:  MOVLW  29
0195:  ADDWF  51,W
0196:  MOVWF  04
0197:  BCF    03.7
0198:  CLRF   00
0199:  INCF   51,F
019A:  GOTO   190
.................... 			line = 0; 
019B:  CLRF   51
.................... 		} 
019C:  GOTO   168
.................... 	} 
.................... 	return 0; 
019D:  MOVLW  00
019E:  MOVWF  78
.................... } 
019F:  SLEEP

Configuration Fuses:
   Word  1: 3F38   NOWDT NOPUT INTRC_IO MCLR NOBROWNOUT NOLVP NOCPD NOPROTECT
