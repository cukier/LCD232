CCS PCM C Compiler, Version 4.140, 31805               26-fev-14 15:30

               Filename:   D:\Eletronica\Projetos\LCD232\lcd232.lst

               ROM used:   437 words (21%)
                           Largest free fragment is 1611
               RAM used:   51 (23%) at main() level
                           61 (27%) worst case
               Stack:     4 worst case (3 in main + 1 for interrupts)

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   132
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   7F,W
0009:  MOVWF  20
000A:  MOVF   0A,W
000B:  MOVWF  27
000C:  CLRF   0A
000D:  SWAPF  20,F
000E:  MOVF   04,W
000F:  MOVWF  22
0010:  MOVF   77,W
0011:  MOVWF  23
0012:  MOVF   78,W
0013:  MOVWF  24
0014:  MOVF   79,W
0015:  MOVWF  25
0016:  MOVF   7A,W
0017:  MOVWF  26
0018:  BCF    03.7
0019:  BCF    03.5
001A:  MOVLW  8C
001B:  MOVWF  04
001C:  BTFSS  00.5
001D:  GOTO   020
001E:  BTFSC  0C.5
001F:  GOTO   046
0020:  MOVLW  8C
0021:  MOVWF  04
0022:  BTFSS  00.0
0023:  GOTO   026
0024:  BTFSC  0C.0
0025:  GOTO   040
0026:  MOVF   22,W
0027:  MOVWF  04
0028:  MOVF   23,W
0029:  MOVWF  77
002A:  MOVF   24,W
002B:  MOVWF  78
002C:  MOVF   25,W
002D:  MOVWF  79
002E:  MOVF   26,W
002F:  MOVWF  7A
0030:  MOVF   27,W
0031:  MOVWF  0A
0032:  SWAPF  21,W
0033:  MOVWF  03
0034:  SWAPF  7F,F
0035:  SWAPF  7F,W
0036:  RETFIE
.................... /* 
....................  * lcd232.c 
....................  * 
....................  *  Created on: 01/10/2012 
....................  *      Author: cuki 
....................  */ 
....................  
.................... #include<16F628A.h> 
.................... //////// Standard Header file for the PIC16F628A device //////////////// 
.................... #device PIC16F628A 
.................... #list 
....................  
.................... #zero_ram 
....................  
.................... #fuses NOWDT,NOPUT,INTRC_IO,MCLR,NOBROWNOUT,NOLVP,NOCPD,NOPROTECT 
.................... #use delay(clock=4MHz) 
*
005C:  MOVLW  54
005D:  MOVWF  04
005E:  BCF    03.7
005F:  MOVF   00,W
0060:  BTFSC  03.2
0061:  GOTO   070
0062:  MOVLW  01
0063:  MOVWF  78
0064:  CLRF   77
0065:  DECFSZ 77,F
0066:  GOTO   065
0067:  DECFSZ 78,F
0068:  GOTO   064
0069:  MOVLW  4A
006A:  MOVWF  77
006B:  DECFSZ 77,F
006C:  GOTO   06B
006D:  GOTO   06E
006E:  DECFSZ 00,F
006F:  GOTO   062
0070:  RETURN
.................... #use rs232(baud=9600,xmit=pin_b2,rcv=pin_b1) 
....................  
.................... #include "lcd_4b.c" 
.................... #define rs PIN_B4 
.................... #define en PIN_B5 
.................... #define d4 PIN_A6 
.................... #define d5 PIN_A7 
.................... #define d6 PIN_A0 
.................... #define d7 PIN_A1 
....................  
.................... void lcd_cmd(int cmd) { 
.................... 	output_bit(d4, bit_test(cmd, 0)); 
0071:  BTFSC  55.0
0072:  GOTO   075
0073:  BCF    05.6
0074:  GOTO   076
0075:  BSF    05.6
0076:  BSF    03.5
0077:  BCF    05.6
.................... 	output_bit(d5, bit_test(cmd, 1)); 
0078:  BCF    03.5
0079:  BTFSC  55.1
007A:  GOTO   07D
007B:  BCF    05.7
007C:  GOTO   07E
007D:  BSF    05.7
007E:  BSF    03.5
007F:  BCF    05.7
.................... 	output_bit(d6, bit_test(cmd, 2)); 
0080:  BCF    03.5
0081:  BTFSC  55.2
0082:  GOTO   085
0083:  BCF    05.0
0084:  GOTO   086
0085:  BSF    05.0
0086:  BSF    03.5
0087:  BCF    05.0
.................... 	output_bit(d7, bit_test(cmd, 3)); 
0088:  BCF    03.5
0089:  BTFSC  55.3
008A:  GOTO   08D
008B:  BCF    05.1
008C:  GOTO   08E
008D:  BSF    05.1
008E:  BSF    03.5
008F:  BCF    05.1
.................... 	output_high(en); 
0090:  BCF    06.5
0091:  BCF    03.5
0092:  BSF    06.5
.................... 	output_low(en); 
0093:  BSF    03.5
0094:  BCF    06.5
0095:  BCF    03.5
0096:  BCF    06.5
.................... } 
0097:  RETURN
....................  
.................... void lcd_envia_byte(short endereco, int dado) { 
.................... 	output_low(rs); 
0098:  BSF    03.5
0099:  BCF    06.4
009A:  BCF    03.5
009B:  BCF    06.4
.................... 	output_bit(rs, endereco); 
009C:  MOVF   52,F
009D:  BTFSS  03.2
009E:  GOTO   0A1
009F:  BCF    06.4
00A0:  GOTO   0A2
00A1:  BSF    06.4
00A2:  BSF    03.5
00A3:  BCF    06.4
.................... 	delay_us(100); 
00A4:  MOVLW  20
00A5:  MOVWF  77
00A6:  DECFSZ 77,F
00A7:  GOTO   0A6
00A8:  GOTO   0A9
00A9:  NOP
.................... 	output_low(en); 
00AA:  BCF    06.5
00AB:  BCF    03.5
00AC:  BCF    06.5
.................... 	lcd_cmd(dado >> 4); 
00AD:  SWAPF  53,W
00AE:  MOVWF  54
00AF:  MOVLW  0F
00B0:  ANDWF  54,F
00B1:  MOVF   54,W
00B2:  MOVWF  55
00B3:  CALL   071
.................... 	lcd_cmd(dado & 0x0f); 
00B4:  MOVF   53,W
00B5:  ANDLW  0F
00B6:  MOVWF  54
00B7:  MOVWF  55
00B8:  CALL   071
.................... 	delay_ms(1); 
00B9:  MOVLW  01
00BA:  MOVWF  54
00BB:  CALL   05C
.................... } 
00BC:  RETURN
....................  
.................... void lcd_pos_xy(int x, int y) { 
.................... 	int endereco; 
.................... 	if (y != 1) 
*
0117:  DECFSZ 50,W
0118:  GOTO   11A
0119:  GOTO   11D
.................... 		endereco = 0xc0; 
011A:  MOVLW  C0
011B:  MOVWF  51
.................... 	else 
011C:  GOTO   11F
.................... 		endereco = 0x80; 
011D:  MOVLW  80
011E:  MOVWF  51
.................... 	endereco += x - 1; 
011F:  MOVLW  01
0120:  SUBWF  4F,W
0121:  ADDWF  51,F
.................... 	lcd_envia_byte(0, endereco); 
0122:  CLRF   52
0123:  MOVF   51,W
0124:  MOVWF  53
0125:  CALL   098
.................... } 
....................  
.................... void lcd(char c) { 
.................... 	switch (c) { 
*
00FD:  MOVF   4E,W
00FE:  XORLW  0C
00FF:  BTFSC  03.2
0100:  GOTO   10B
0101:  XORLW  06
0102:  BTFSC  03.2
0103:  GOTO   113
0104:  XORLW  07
0105:  BTFSC  03.2
0106:  GOTO   113
0107:  XORLW  05
0108:  BTFSC  03.2
0109:  GOTO   127
010A:  GOTO   12C
.................... 	case '\f': 
.................... 		lcd_envia_byte(0, 1);     // 0,1 
010B:  CLRF   52
010C:  MOVLW  01
010D:  MOVWF  53
010E:  CALL   098
.................... 		delay_ms(2); 
010F:  MOVLW  02
0110:  MOVWF  54
0111:  CALL   05C
.................... 		break; 
0112:  GOTO   131
.................... 	case '\n': 
.................... 	case '\r': 
.................... 		lcd_pos_xy(1, 2);      // 1,2  COLUNA,LINHA 
0113:  MOVLW  01
0114:  MOVWF  4F
0115:  MOVLW  02
0116:  MOVWF  50
.................... 		break; 
*
0126:  GOTO   131
.................... 	case '\b': 
.................... 		lcd_envia_byte(0, 0x10); 
0127:  CLRF   52
0128:  MOVLW  10
0129:  MOVWF  53
012A:  CALL   098
.................... 		break; 
012B:  GOTO   131
.................... 	default: 
.................... 		lcd_envia_byte(1, c); 
012C:  MOVLW  01
012D:  MOVWF  52
012E:  MOVF   4E,W
012F:  MOVWF  53
0130:  CALL   098
.................... 		break; 
.................... 	} 
.................... } 
0131:  GOTO   19D (RETURN)
....................  
.................... void lcd_init() { 
....................  
.................... 	int conta; 
....................  
.................... 	output_low(rs); 
*
00BD:  BSF    03.5
00BE:  BCF    06.4
00BF:  BCF    03.5
00C0:  BCF    06.4
.................... 	output_low(en); 
00C1:  BSF    03.5
00C2:  BCF    06.5
00C3:  BCF    03.5
00C4:  BCF    06.5
.................... 	output_low(d4); 
00C5:  BSF    03.5
00C6:  BCF    05.6
00C7:  BCF    03.5
00C8:  BCF    05.6
.................... 	output_low(d5); 
00C9:  BSF    03.5
00CA:  BCF    05.7
00CB:  BCF    03.5
00CC:  BCF    05.7
.................... 	output_low(d6); 
00CD:  BSF    03.5
00CE:  BCF    05.0
00CF:  BCF    03.5
00D0:  BCF    05.0
.................... 	output_low(d7); 
00D1:  BSF    03.5
00D2:  BCF    05.1
00D3:  BCF    03.5
00D4:  BCF    05.1
....................  
.................... 	delay_ms(15); 
00D5:  MOVLW  0F
00D6:  MOVWF  54
00D7:  CALL   05C
....................  
.................... 	for (conta = 1; conta <= 3; conta++) { 
00D8:  MOVLW  01
00D9:  MOVWF  4C
00DA:  MOVF   4C,W
00DB:  SUBLW  03
00DC:  BTFSS  03.0
00DD:  GOTO   0E6
.................... 		lcd_cmd(0x03); 
00DE:  MOVLW  03
00DF:  MOVWF  55
00E0:  CALL   071
.................... 		delay_ms(5); 
00E1:  MOVLW  05
00E2:  MOVWF  54
00E3:  CALL   05C
.................... 	} 
00E4:  INCF   4C,F
00E5:  GOTO   0DA
.................... 	lcd_cmd(0x02);           //escreve comando para interface de 4 vias de dados 
00E6:  MOVLW  02
00E7:  MOVWF  55
00E8:  CALL   071
.................... 	lcd_envia_byte(0, 0x28); //escreve comando informando lcd de 2 linhas (5x7) em 4bits 
00E9:  CLRF   52
00EA:  MOVLW  28
00EB:  MOVWF  53
00EC:  CALL   098
.................... 	lcd_envia_byte(0, 0x0c); //escreve comando para limpar todo o display 
00ED:  CLRF   52
00EE:  MOVLW  0C
00EF:  MOVWF  53
00F0:  CALL   098
.................... 	lcd_envia_byte(0, 0x01); //escreve comando para ligar o display **com cursor piscante 
00F1:  CLRF   52
00F2:  MOVLW  01
00F3:  MOVWF  53
00F4:  CALL   098
.................... 	lcd_envia_byte(0, 0x06); //escreve comando para incrementar automaticamente á direita 
00F5:  CLRF   52
00F6:  MOVLW  06
00F7:  MOVWF  53
00F8:  CALL   098
.................... 	delay_ms(5); 
00F9:  MOVLW  05
00FA:  MOVWF  54
00FB:  CALL   05C
.................... } 
00FC:  GOTO   17C (RETURN)
....................  
....................  
....................  
.................... int buffer[34]; 
.................... short write = 1; 
.................... int line = 0; 
....................  
.................... #INT_TIMER1 
.................... void isr_timer1() { 
.................... 	clear_interrupt(INT_TIMER1); 
*
0040:  BCF    0C.0
.................... 	setup_timer_1(T1_DISABLED); 
0041:  CLRF   10
.................... 	write = 1; 
0042:  BSF    4A.0
.................... } 
....................  
0043:  BCF    0C.0
0044:  BCF    0A.3
0045:  GOTO   026
.................... #int_rda 
.................... void serial_isr() { 
.................... 	clear_interrupt(INT_RDA); 
0046:  BCF    0C.5
.................... 	buffer[line++] = getc(); 
0047:  MOVF   4B,W
0048:  INCF   4B,F
0049:  ADDLW  28
004A:  MOVWF  04
004B:  BCF    03.7
004C:  BTFSS  0C.5
004D:  GOTO   04C
004E:  MOVF   1A,W
004F:  MOVWF  00
.................... 	buffer[line] = '\0'; 
0050:  MOVLW  28
0051:  ADDWF  4B,W
0052:  MOVWF  04
0053:  BCF    03.7
0054:  CLRF   00
.................... 	set_timer1(0); 
0055:  CLRF   0F
0056:  CLRF   0E
.................... 	setup_timer_1(T1_INTERNAL | T1_DIV_BY_1); 
0057:  MOVLW  85
0058:  MOVWF  10
.................... } 
....................  
0059:  BCF    0C.5
005A:  BCF    0A.3
005B:  GOTO   026
.................... int main(void) { 
*
0132:  MOVF   03,W
0133:  ANDLW  1F
0134:  MOVWF  03
0135:  MOVLW  57
0136:  MOVWF  77
0137:  MOVLW  20
0138:  MOVWF  04
0139:  BCF    03.7
013A:  CLRF   00
013B:  INCF   04,F
013C:  DECFSZ 77,F
013D:  GOTO   13A
013E:  CLRF   78
013F:  CLRF   79
0140:  CLRF   7A
0141:  CLRF   7B
0142:  CLRF   7C
0143:  CLRF   7D
0144:  CLRF   7E
0145:  MOVLW  50
0146:  MOVWF  77
0147:  MOVLW  A0
0148:  MOVWF  04
0149:  BCF    03.7
014A:  CLRF   00
014B:  INCF   04,F
014C:  DECFSZ 77,F
014D:  GOTO   14A
014E:  MOVLW  30
014F:  MOVWF  77
0150:  MOVLW  20
0151:  MOVWF  04
0152:  BSF    03.7
0153:  CLRF   00
0154:  INCF   04,F
0155:  DECFSZ 77,F
0156:  GOTO   153
0157:  BCF    03.7
0158:  CLRF   20
0159:  CLRF   04
015A:  BCF    03.7
015B:  MOVLW  1F
015C:  ANDWF  03,F
015D:  BSF    03.5
015E:  BSF    0E.3
015F:  MOVLW  19
0160:  MOVWF  19
0161:  MOVLW  A6
0162:  MOVWF  18
0163:  MOVLW  90
0164:  BCF    03.5
0165:  MOVWF  18
0166:  BSF    4A.0
0167:  CLRF   4B
0168:  MOVLW  07
0169:  MOVWF  1F
....................  
.................... 	strcpy(buffer, "Done"); 
016A:  CLRF   4C
016B:  CLRF   4D
016C:  MOVLW  28
016D:  MOVWF  04
016E:  BCF    03.7
016F:  MOVF   4C,W
0170:  ADDWF  04,F
0171:  MOVF   4D,W
0172:  CALL   037
0173:  MOVWF  00
0174:  IORLW  00
0175:  BTFSC  03.2
0176:  GOTO   17A
0177:  INCF   4D,F
0178:  INCF   4C,F
0179:  GOTO   16C
.................... 	write = TRUE; 
017A:  BSF    4A.0
.................... 	lcd_init(); 
017B:  GOTO   0BD
.................... 	delay_ms(500); 
017C:  MOVLW  02
017D:  MOVWF  4C
017E:  MOVLW  FA
017F:  MOVWF  54
0180:  CALL   05C
0181:  DECFSZ 4C,F
0182:  GOTO   17E
....................  
.................... 	clear_interrupt(INT_TIMER1); 
0183:  BCF    0C.0
.................... 	enable_interrupts(INT_RDA); 
0184:  BSF    03.5
0185:  BSF    0C.5
.................... 	enable_interrupts(INT_TIMER1); 
0186:  BSF    0C.0
.................... 	enable_interrupts(GLOBAL); 
0187:  MOVLW  C0
0188:  BCF    03.5
0189:  IORWF  0B,F
....................  
.................... 	while (TRUE) { 
.................... 		if (write) { 
018A:  BTFSS  4A.0
018B:  GOTO   1B1
.................... 			write = 0; 
018C:  BCF    4A.0
.................... 			printf(lcd, "%s", buffer); 
018D:  MOVLW  28
018E:  MOVWF  04
018F:  BCF    03.7
0190:  MOVLW  00
0191:  IORWF  00,W
0192:  BTFSC  03.2
0193:  GOTO   1A4
0194:  CLRF   4D
0195:  MOVF   04,W
0196:  MOVWF  4C
0197:  BCF    4D.0
0198:  BTFSC  03.7
0199:  BSF    4D.0
019A:  MOVF   00,W
019B:  MOVWF  4E
019C:  GOTO   0FD
019D:  MOVF   4C,W
019E:  MOVWF  04
019F:  BCF    03.7
01A0:  BTFSC  4D.0
01A1:  BSF    03.7
01A2:  INCF   04,F
01A3:  GOTO   190
.................... 			for (line = 0; line < 32; line++) { 
01A4:  CLRF   4B
01A5:  MOVF   4B,W
01A6:  SUBLW  1F
01A7:  BTFSS  03.0
01A8:  GOTO   1B0
.................... 				buffer[line] = '\0'; 
01A9:  MOVLW  28
01AA:  ADDWF  4B,W
01AB:  MOVWF  04
01AC:  BCF    03.7
01AD:  CLRF   00
.................... 			} 
01AE:  INCF   4B,F
01AF:  GOTO   1A5
.................... 			line = 0; 
01B0:  CLRF   4B
.................... //			sleep(); 
.................... 		} 
.................... 	} 
01B1:  GOTO   18A
.................... 	return 0; 
01B2:  MOVLW  00
01B3:  MOVWF  78
.................... } 
01B4:  SLEEP

Configuration Fuses:
   Word  1: 3F38   NOWDT NOPUT INTRC_IO MCLR NOBROWNOUT NOLVP NOCPD NOPROTECT
