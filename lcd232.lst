CCS PCM C Compiler, Version 4.140, 31805               04-fev-14 11:28

               Filename:   D:\Eletronica\Projetos\LCD232\lcd232.lst

               ROM used:   468 words (23%)
                           Largest free fragment is 1580
               RAM used:   55 (25%) at main() level
                           65 (29%) worst case
               Stack:     5 worst case (3 in main + 2 for interrupts)

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   14D
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   7F,W
0009:  MOVWF  20
000A:  MOVF   0A,W
000B:  MOVWF  27
000C:  CLRF   0A
000D:  SWAPF  20,F
000E:  MOVF   04,W
000F:  MOVWF  22
0010:  MOVF   77,W
0011:  MOVWF  23
0012:  MOVF   78,W
0013:  MOVWF  24
0014:  MOVF   79,W
0015:  MOVWF  25
0016:  MOVF   7A,W
0017:  MOVWF  26
0018:  BCF    03.7
0019:  BCF    03.5
001A:  MOVLW  8C
001B:  MOVWF  04
001C:  BTFSS  00.5
001D:  GOTO   020
001E:  BTFSC  0C.5
001F:  GOTO   04B
0020:  MOVLW  8C
0021:  MOVWF  04
0022:  BTFSS  00.0
0023:  GOTO   026
0024:  BTFSC  0C.0
0025:  GOTO   045
0026:  MOVF   22,W
0027:  MOVWF  04
0028:  MOVF   23,W
0029:  MOVWF  77
002A:  MOVF   24,W
002B:  MOVWF  78
002C:  MOVF   25,W
002D:  MOVWF  79
002E:  MOVF   26,W
002F:  MOVWF  7A
0030:  MOVF   27,W
0031:  MOVWF  0A
0032:  SWAPF  21,W
0033:  MOVWF  03
0034:  SWAPF  7F,F
0035:  SWAPF  7F,W
0036:  RETFIE
.................... /* 
....................  * lcd232.c 
....................  * 
....................  *  Created on: 01/10/2012 
....................  *      Author: cuki 
....................  */ 
....................  
.................... #include<16F628A.h> 
.................... //////// Standard Header file for the PIC16F628A device //////////////// 
.................... #device PIC16F628A 
.................... #list 
....................  
.................... #zero_ram 
....................  
.................... #fuses NOWDT,NOPUT,INTRC_IO,NOMCLR,NOBROWNOUT,NOLVP,NOCPD,NOPROTECT 
.................... #use delay(clock=4MHz) 
*
0077:  MOVLW  58
0078:  MOVWF  04
0079:  BCF    03.7
007A:  MOVF   00,W
007B:  BTFSC  03.2
007C:  GOTO   08B
007D:  MOVLW  01
007E:  MOVWF  78
007F:  CLRF   77
0080:  DECFSZ 77,F
0081:  GOTO   080
0082:  DECFSZ 78,F
0083:  GOTO   07F
0084:  MOVLW  4A
0085:  MOVWF  77
0086:  DECFSZ 77,F
0087:  GOTO   086
0088:  GOTO   089
0089:  DECFSZ 00,F
008A:  GOTO   07D
008B:  RETURN
.................... #use rs232(baud=9600,xmit=pin_b2,rcv=pin_b1) 
....................  
.................... #include"lcd_4b.c" 
.................... #define rs pin_b4 
.................... #define en pin_b5 
.................... #define d4 pin_a6 
.................... #define d5 pin_a7 
.................... #define d6 pin_a0 
.................... #define d7 pin_a1 
....................  
.................... void lcd_cmd(int cmd) { 
.................... 	output_bit(d4, bit_test(cmd, 0)); 
008C:  BTFSC  59.0
008D:  GOTO   090
008E:  BCF    05.6
008F:  GOTO   091
0090:  BSF    05.6
0091:  BSF    03.5
0092:  BCF    05.6
.................... 	output_bit(d5, bit_test(cmd, 1)); 
0093:  BCF    03.5
0094:  BTFSC  59.1
0095:  GOTO   098
0096:  BCF    05.7
0097:  GOTO   099
0098:  BSF    05.7
0099:  BSF    03.5
009A:  BCF    05.7
.................... 	output_bit(d6, bit_test(cmd, 2)); 
009B:  BCF    03.5
009C:  BTFSC  59.2
009D:  GOTO   0A0
009E:  BCF    05.0
009F:  GOTO   0A1
00A0:  BSF    05.0
00A1:  BSF    03.5
00A2:  BCF    05.0
.................... 	output_bit(d7, bit_test(cmd, 3)); 
00A3:  BCF    03.5
00A4:  BTFSC  59.3
00A5:  GOTO   0A8
00A6:  BCF    05.1
00A7:  GOTO   0A9
00A8:  BSF    05.1
00A9:  BSF    03.5
00AA:  BCF    05.1
.................... 	output_high(en); 
00AB:  BCF    06.5
00AC:  BCF    03.5
00AD:  BSF    06.5
.................... 	output_low(en); 
00AE:  BSF    03.5
00AF:  BCF    06.5
00B0:  BCF    03.5
00B1:  BCF    06.5
.................... } 
00B2:  RETURN
....................  
.................... void lcd_envia_byte(short endereco, int dado) { 
.................... 	output_low(rs); 
00B3:  BSF    03.5
00B4:  BCF    06.4
00B5:  BCF    03.5
00B6:  BCF    06.4
.................... 	output_bit(rs, endereco); 
00B7:  MOVF   56,F
00B8:  BTFSS  03.2
00B9:  GOTO   0BC
00BA:  BCF    06.4
00BB:  GOTO   0BD
00BC:  BSF    06.4
00BD:  BSF    03.5
00BE:  BCF    06.4
.................... 	delay_us(100); 
00BF:  MOVLW  20
00C0:  MOVWF  77
00C1:  DECFSZ 77,F
00C2:  GOTO   0C1
00C3:  GOTO   0C4
00C4:  NOP
.................... 	output_low(en); 
00C5:  BCF    06.5
00C6:  BCF    03.5
00C7:  BCF    06.5
.................... 	lcd_cmd(dado >> 4); 
00C8:  SWAPF  57,W
00C9:  MOVWF  58
00CA:  MOVLW  0F
00CB:  ANDWF  58,F
00CC:  MOVF   58,W
00CD:  MOVWF  59
00CE:  CALL   08C
.................... 	lcd_cmd(dado & 0x0f); 
00CF:  MOVF   57,W
00D0:  ANDLW  0F
00D1:  MOVWF  58
00D2:  MOVWF  59
00D3:  CALL   08C
.................... 	delay_ms(1); 
00D4:  MOVLW  01
00D5:  MOVWF  58
00D6:  CALL   077
.................... } 
00D7:  RETURN
....................  
.................... void lcd_pos_xy(byte x, byte y) { 
.................... 	byte endereco; 
.................... 	if (y != 1) 
*
0132:  DECFSZ 54,W
0133:  GOTO   135
0134:  GOTO   138
.................... 		endereco = 0xc0; 
0135:  MOVLW  C0
0136:  MOVWF  55
.................... 	else 
0137:  GOTO   13A
.................... 		endereco = 0x80; 
0138:  MOVLW  80
0139:  MOVWF  55
.................... 	endereco += x - 1; 
013A:  MOVLW  01
013B:  SUBWF  53,W
013C:  ADDWF  55,F
.................... 	lcd_envia_byte(0, endereco); 
013D:  CLRF   56
013E:  MOVF   55,W
013F:  MOVWF  57
0140:  CALL   0B3
.................... } 
....................  
.................... void lcd(char c) { 
.................... 	switch (c) { 
*
0118:  MOVF   52,W
0119:  XORLW  0C
011A:  BTFSC  03.2
011B:  GOTO   126
011C:  XORLW  06
011D:  BTFSC  03.2
011E:  GOTO   12E
011F:  XORLW  07
0120:  BTFSC  03.2
0121:  GOTO   12E
0122:  XORLW  05
0123:  BTFSC  03.2
0124:  GOTO   142
0125:  GOTO   147
.................... 	case '\f': 
.................... 		lcd_envia_byte(0, 1);     // 0,1 
0126:  CLRF   56
0127:  MOVLW  01
0128:  MOVWF  57
0129:  CALL   0B3
.................... 		delay_ms(2); 
012A:  MOVLW  02
012B:  MOVWF  58
012C:  CALL   077
.................... 		break; 
012D:  GOTO   14C
.................... 	case '\n': 
.................... 	case '\r': 
.................... 		lcd_pos_xy(1, 2);      // 1,2  COLUNA,LINHA 
012E:  MOVLW  01
012F:  MOVWF  53
0130:  MOVLW  02
0131:  MOVWF  54
.................... 		break; 
*
0141:  GOTO   14C
.................... 	case '\b': 
.................... 		lcd_envia_byte(0, 0x10); 
0142:  CLRF   56
0143:  MOVLW  10
0144:  MOVWF  57
0145:  CALL   0B3
.................... 		break; 
0146:  GOTO   14C
.................... 	default: 
.................... 		lcd_envia_byte(1, c); 
0147:  MOVLW  01
0148:  MOVWF  56
0149:  MOVF   52,W
014A:  MOVWF  57
014B:  CALL   0B3
.................... 		break; 
.................... 	} 
.................... } 
014C:  GOTO   1B7 (RETURN)
....................  
.................... void lcd_init() { 
....................  
.................... 	int conta; 
....................  
.................... 	output_low(rs); 
*
00D8:  BSF    03.5
00D9:  BCF    06.4
00DA:  BCF    03.5
00DB:  BCF    06.4
.................... 	output_low(en); 
00DC:  BSF    03.5
00DD:  BCF    06.5
00DE:  BCF    03.5
00DF:  BCF    06.5
.................... 	output_low(d4); 
00E0:  BSF    03.5
00E1:  BCF    05.6
00E2:  BCF    03.5
00E3:  BCF    05.6
.................... 	output_low(d5); 
00E4:  BSF    03.5
00E5:  BCF    05.7
00E6:  BCF    03.5
00E7:  BCF    05.7
.................... 	output_low(d6); 
00E8:  BSF    03.5
00E9:  BCF    05.0
00EA:  BCF    03.5
00EB:  BCF    05.0
.................... 	output_low(d7); 
00EC:  BSF    03.5
00ED:  BCF    05.1
00EE:  BCF    03.5
00EF:  BCF    05.1
....................  
.................... 	delay_ms(15); 
00F0:  MOVLW  0F
00F1:  MOVWF  58
00F2:  CALL   077
....................  
.................... 	for (conta = 1; conta <= 3; conta++) { 
00F3:  MOVLW  01
00F4:  MOVWF  50
00F5:  MOVF   50,W
00F6:  SUBLW  03
00F7:  BTFSS  03.0
00F8:  GOTO   101
.................... 		lcd_cmd(0x03); 
00F9:  MOVLW  03
00FA:  MOVWF  59
00FB:  CALL   08C
.................... 		delay_ms(5); 
00FC:  MOVLW  05
00FD:  MOVWF  58
00FE:  CALL   077
.................... 	} 
00FF:  INCF   50,F
0100:  GOTO   0F5
.................... 	lcd_cmd(0x02);           //escreve comando para interface de 4 vias de dados 
0101:  MOVLW  02
0102:  MOVWF  59
0103:  CALL   08C
.................... 	lcd_envia_byte(0, 0x28); //escreve comando informando lcd de 2 linhas (5x7) em 4bits 
0104:  CLRF   56
0105:  MOVLW  28
0106:  MOVWF  57
0107:  CALL   0B3
.................... 	lcd_envia_byte(0, 0x0c); //escreve comando para limpar todo o display 
0108:  CLRF   56
0109:  MOVLW  0C
010A:  MOVWF  57
010B:  CALL   0B3
.................... 	lcd_envia_byte(0, 0x01); //escreve comando para ligar o display **com cursor piscante 
010C:  CLRF   56
010D:  MOVLW  01
010E:  MOVWF  57
010F:  CALL   0B3
.................... 	lcd_envia_byte(0, 0x06); //escreve comando para incrementar automaticamente á direita 
0110:  CLRF   56
0111:  MOVLW  06
0112:  MOVWF  57
0113:  CALL   0B3
.................... 	delay_ms(5); 
0114:  MOVLW  05
0115:  MOVWF  58
0116:  CALL   077
.................... } 
0117:  GOTO   19A (RETURN)
....................  
....................  
....................  
.................... int buffer[34]; 
.................... int col, i, j; 
.................... short write = 1; 
.................... int line = 0; 
....................  
.................... #INT_TIMER1 
.................... void isr_timer1() { 
.................... 	clear_interrupt(INT_TIMER1); 
*
0045:  BCF    0C.0
.................... 	setup_timer_1(T1_DISABLED); 
0046:  CLRF   10
.................... 	write = 1; 
0047:  BSF    4E.0
.................... } 
....................  
0048:  BCF    0C.0
0049:  BCF    0A.3
004A:  GOTO   026
.................... #int_rda 
.................... void serial_isr() { 
.................... 	clear_interrupt(INT_RDA); 
004B:  BCF    0C.5
.................... 	if (line < 31) { 
004C:  MOVF   4F,W
004D:  SUBLW  1E
004E:  BTFSS  03.0
004F:  GOTO   05F
.................... 		buffer[line++] = getc(); 
0050:  MOVF   4F,W
0051:  INCF   4F,F
0052:  ADDLW  29
0053:  MOVWF  04
0054:  BCF    03.7
0055:  BTFSS  0C.5
0056:  GOTO   055
0057:  MOVF   1A,W
0058:  MOVWF  00
.................... 		buffer[line] = '\0'; 
0059:  MOVLW  29
005A:  ADDWF  4F,W
005B:  MOVWF  04
005C:  BCF    03.7
005D:  CLRF   00
.................... 	} else { 
005E:  GOTO   070
.................... 		strcpy(buffer, ""); 
005F:  CLRF   5A
0060:  CLRF   5B
0061:  MOVLW  29
0062:  MOVWF  04
0063:  BCF    03.7
0064:  MOVF   5A,W
0065:  ADDWF  04,F
0066:  MOVF   5B,W
0067:  CALL   037
0068:  MOVWF  00
0069:  IORLW  00
006A:  BTFSC  03.2
006B:  GOTO   06F
006C:  INCF   5B,F
006D:  INCF   5A,F
006E:  GOTO   061
.................... 		line = 0; 
006F:  CLRF   4F
.................... 	} 
.................... 	set_timer1(0); 
0070:  CLRF   0F
0071:  CLRF   0E
.................... 	setup_timer_1(T1_INTERNAL | T1_DIV_BY_1); 
0072:  MOVLW  85
0073:  MOVWF  10
.................... } 
....................  
0074:  BCF    0C.5
0075:  BCF    0A.3
0076:  GOTO   026
.................... int main(void) { 
*
014D:  MOVF   03,W
014E:  ANDLW  1F
014F:  MOVWF  03
0150:  MOVLW  57
0151:  MOVWF  77
0152:  MOVLW  20
0153:  MOVWF  04
0154:  BCF    03.7
0155:  CLRF   00
0156:  INCF   04,F
0157:  DECFSZ 77,F
0158:  GOTO   155
0159:  CLRF   78
015A:  CLRF   79
015B:  CLRF   7A
015C:  CLRF   7B
015D:  CLRF   7C
015E:  CLRF   7D
015F:  CLRF   7E
0160:  MOVLW  50
0161:  MOVWF  77
0162:  MOVLW  A0
0163:  MOVWF  04
0164:  BCF    03.7
0165:  CLRF   00
0166:  INCF   04,F
0167:  DECFSZ 77,F
0168:  GOTO   165
0169:  MOVLW  30
016A:  MOVWF  77
016B:  MOVLW  20
016C:  MOVWF  04
016D:  BSF    03.7
016E:  CLRF   00
016F:  INCF   04,F
0170:  DECFSZ 77,F
0171:  GOTO   16E
0172:  BCF    03.7
0173:  CLRF   20
0174:  CLRF   04
0175:  BCF    03.7
0176:  MOVLW  1F
0177:  ANDWF  03,F
0178:  BSF    03.5
0179:  BSF    0E.3
017A:  MOVLW  19
017B:  MOVWF  19
017C:  MOVLW  A6
017D:  MOVWF  18
017E:  MOVLW  90
017F:  BCF    03.5
0180:  MOVWF  18
0181:  BSF    4E.0
0182:  CLRF   4F
0183:  MOVLW  07
0184:  MOVWF  1F
....................  
.................... 	output_low(PIN_B3); 
0185:  BSF    03.5
0186:  BCF    06.3
0187:  BCF    03.5
0188:  BCF    06.3
.................... 	strcpy(buffer, "Done"); 
0189:  CLRF   50
018A:  CLRF   51
018B:  MOVLW  29
018C:  MOVWF  04
018D:  BCF    03.7
018E:  MOVF   50,W
018F:  ADDWF  04,F
0190:  MOVF   51,W
0191:  CALL   03C
0192:  MOVWF  00
0193:  IORLW  00
0194:  BTFSC  03.2
0195:  GOTO   199
0196:  INCF   51,F
0197:  INCF   50,F
0198:  GOTO   18B
.................... 	lcd_init(); 
0199:  GOTO   0D8
.................... 	delay_ms(150); 
019A:  MOVLW  96
019B:  MOVWF  58
019C:  CALL   077
....................  
.................... 	clear_interrupt(INT_TIMER1); 
019D:  BCF    0C.0
.................... 	enable_interrupts(INT_RDA); 
019E:  BSF    03.5
019F:  BSF    0C.5
.................... 	enable_interrupts(INT_TIMER1); 
01A0:  BSF    0C.0
.................... 	enable_interrupts(GLOBAL); 
01A1:  MOVLW  C0
01A2:  BCF    03.5
01A3:  IORWF  0B,F
....................  
.................... 	while (TRUE) { 
.................... 		if (write) { 
01A4:  BTFSS  4E.0
01A5:  GOTO   1D0
.................... 			write = 0; 
01A6:  BCF    4E.0
.................... 			printf(lcd, "%s", buffer); 
01A7:  MOVLW  29
01A8:  MOVWF  04
01A9:  BCF    03.7
01AA:  MOVLW  00
01AB:  IORWF  00,W
01AC:  BTFSC  03.2
01AD:  GOTO   1BE
01AE:  CLRF   51
01AF:  MOVF   04,W
01B0:  MOVWF  50
01B1:  BCF    51.0
01B2:  BTFSC  03.7
01B3:  BSF    51.0
01B4:  MOVF   00,W
01B5:  MOVWF  52
01B6:  GOTO   118
01B7:  MOVF   50,W
01B8:  MOVWF  04
01B9:  BCF    03.7
01BA:  BTFSC  51.0
01BB:  BSF    03.7
01BC:  INCF   04,F
01BD:  GOTO   1AA
.................... 			strcpy(buffer, ""); 
01BE:  CLRF   50
01BF:  CLRF   51
01C0:  MOVLW  29
01C1:  MOVWF  04
01C2:  BCF    03.7
01C3:  MOVF   50,W
01C4:  ADDWF  04,F
01C5:  MOVF   51,W
01C6:  CALL   037
01C7:  MOVWF  00
01C8:  IORLW  00
01C9:  BTFSC  03.2
01CA:  GOTO   1CE
01CB:  INCF   51,F
01CC:  INCF   50,F
01CD:  GOTO   1C0
.................... 			buffer[0] = '\0'; 
01CE:  CLRF   29
.................... 			line = 0; 
01CF:  CLRF   4F
.................... 		} 
.................... 	} 
01D0:  GOTO   1A4
.................... 	return 0; 
01D1:  MOVLW  00
01D2:  MOVWF  78
.................... } 
01D3:  SLEEP

Configuration Fuses:
   Word  1: 3F18   NOWDT NOPUT INTRC_IO NOMCLR NOBROWNOUT NOLVP NOCPD NOPROTECT
