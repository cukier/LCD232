CCS PCM C Compiler, Version 4.140, 31805               03-out-13 14:36

               Filename:   D:\Eletronica\Projetos\LCD232\lcd232.lst

               ROM used:   456 words (22%)
                           Largest free fragment is 1592
               RAM used:   54 (24%) at main() level
                           64 (29%) worst case
               Stack:     5 worst case (3 in main + 2 for interrupts)

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   14E
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   7F,W
0009:  MOVWF  20
000A:  MOVF   0A,W
000B:  MOVWF  27
000C:  CLRF   0A
000D:  SWAPF  20,F
000E:  MOVF   04,W
000F:  MOVWF  22
0010:  MOVF   77,W
0011:  MOVWF  23
0012:  MOVF   78,W
0013:  MOVWF  24
0014:  MOVF   79,W
0015:  MOVWF  25
0016:  MOVF   7A,W
0017:  MOVWF  26
0018:  BCF    03.7
0019:  BCF    03.5
001A:  MOVLW  8C
001B:  MOVWF  04
001C:  BTFSS  00.5
001D:  GOTO   020
001E:  BTFSC  0C.5
001F:  GOTO   04C
0020:  MOVLW  8C
0021:  MOVWF  04
0022:  BTFSS  00.0
0023:  GOTO   026
0024:  BTFSC  0C.0
0025:  GOTO   046
0026:  MOVF   22,W
0027:  MOVWF  04
0028:  MOVF   23,W
0029:  MOVWF  77
002A:  MOVF   24,W
002B:  MOVWF  78
002C:  MOVF   25,W
002D:  MOVWF  79
002E:  MOVF   26,W
002F:  MOVWF  7A
0030:  MOVF   27,W
0031:  MOVWF  0A
0032:  SWAPF  21,W
0033:  MOVWF  03
0034:  SWAPF  7F,F
0035:  SWAPF  7F,W
0036:  RETFIE
.................... /* 
....................  * lcd232.c 
....................  * 
....................  *  Created on: 01/10/2012 
....................  *      Author: cuki 
....................  */ 
....................  
.................... #include<16F628A.h> 
.................... //////// Standard Header file for the PIC16F628A device //////////////// 
.................... #device PIC16F628A 
.................... #list 
....................  
.................... #zero_ram 
....................  
.................... #fuses NOWDT,NOPUT,INTRC_IO,NOMCLR,NOBROWNOUT,NOLVP,NOCPD,NOPROTECT 
.................... #use delay(clock=4MHz) 
*
0078:  MOVLW  57
0079:  MOVWF  04
007A:  BCF    03.7
007B:  MOVF   00,W
007C:  BTFSC  03.2
007D:  GOTO   08C
007E:  MOVLW  01
007F:  MOVWF  78
0080:  CLRF   77
0081:  DECFSZ 77,F
0082:  GOTO   081
0083:  DECFSZ 78,F
0084:  GOTO   080
0085:  MOVLW  4A
0086:  MOVWF  77
0087:  DECFSZ 77,F
0088:  GOTO   087
0089:  GOTO   08A
008A:  DECFSZ 00,F
008B:  GOTO   07E
008C:  RETURN
.................... #use rs232(baud=9600,xmit=pin_b2,rcv=pin_b1) 
....................  
.................... #include"lcd_4b.c" 
.................... #define rs pin_b4 
.................... #define en pin_b5 
.................... #define d4 pin_a6 
.................... #define d5 pin_a7 
.................... #define d6 pin_a0 
.................... #define d7 pin_a1 
....................  
.................... void lcd_cmd(int cmd) { 
.................... 	output_bit(d4, bit_test(cmd, 0)); 
008D:  BTFSC  58.0
008E:  GOTO   091
008F:  BCF    05.6
0090:  GOTO   092
0091:  BSF    05.6
0092:  BSF    03.5
0093:  BCF    05.6
.................... 	output_bit(d5, bit_test(cmd, 1)); 
0094:  BCF    03.5
0095:  BTFSC  58.1
0096:  GOTO   099
0097:  BCF    05.7
0098:  GOTO   09A
0099:  BSF    05.7
009A:  BSF    03.5
009B:  BCF    05.7
.................... 	output_bit(d6, bit_test(cmd, 2)); 
009C:  BCF    03.5
009D:  BTFSC  58.2
009E:  GOTO   0A1
009F:  BCF    05.0
00A0:  GOTO   0A2
00A1:  BSF    05.0
00A2:  BSF    03.5
00A3:  BCF    05.0
.................... 	output_bit(d7, bit_test(cmd, 3)); 
00A4:  BCF    03.5
00A5:  BTFSC  58.3
00A6:  GOTO   0A9
00A7:  BCF    05.1
00A8:  GOTO   0AA
00A9:  BSF    05.1
00AA:  BSF    03.5
00AB:  BCF    05.1
.................... 	output_high(en); 
00AC:  BCF    06.5
00AD:  BCF    03.5
00AE:  BSF    06.5
.................... 	output_low(en); 
00AF:  BSF    03.5
00B0:  BCF    06.5
00B1:  BCF    03.5
00B2:  BCF    06.5
.................... } 
00B3:  RETURN
....................  
.................... void lcd_envia_byte(short endereco, int dado) { 
.................... 	output_low(rs); 
00B4:  BSF    03.5
00B5:  BCF    06.4
00B6:  BCF    03.5
00B7:  BCF    06.4
.................... 	output_bit(rs, endereco); 
00B8:  MOVF   55,F
00B9:  BTFSS  03.2
00BA:  GOTO   0BD
00BB:  BCF    06.4
00BC:  GOTO   0BE
00BD:  BSF    06.4
00BE:  BSF    03.5
00BF:  BCF    06.4
.................... 	delay_us(100); 
00C0:  MOVLW  20
00C1:  MOVWF  77
00C2:  DECFSZ 77,F
00C3:  GOTO   0C2
00C4:  GOTO   0C5
00C5:  NOP
.................... 	output_low(en); 
00C6:  BCF    06.5
00C7:  BCF    03.5
00C8:  BCF    06.5
.................... 	lcd_cmd(dado >> 4); 
00C9:  SWAPF  56,W
00CA:  MOVWF  57
00CB:  MOVLW  0F
00CC:  ANDWF  57,F
00CD:  MOVF   57,W
00CE:  MOVWF  58
00CF:  CALL   08D
.................... 	lcd_cmd(dado & 0x0f); 
00D0:  MOVF   56,W
00D1:  ANDLW  0F
00D2:  MOVWF  57
00D3:  MOVWF  58
00D4:  CALL   08D
.................... 	delay_ms(1); 
00D5:  MOVLW  01
00D6:  MOVWF  57
00D7:  CALL   078
.................... } 
00D8:  RETURN
....................  
.................... void lcd_pos_xy(byte x, byte y) { 
.................... 	byte endereco; 
.................... 	if (y != 1) 
*
0133:  DECFSZ 53,W
0134:  GOTO   136
0135:  GOTO   139
.................... 		endereco = 0xc0; 
0136:  MOVLW  C0
0137:  MOVWF  54
.................... 	else 
0138:  GOTO   13B
.................... 		endereco = 0x80; 
0139:  MOVLW  80
013A:  MOVWF  54
.................... 	endereco += x - 1; 
013B:  MOVLW  01
013C:  SUBWF  52,W
013D:  ADDWF  54,F
.................... 	lcd_envia_byte(0, endereco); 
013E:  CLRF   55
013F:  MOVF   54,W
0140:  MOVWF  56
0141:  CALL   0B4
.................... } 
....................  
.................... void lcd(char c) { 
.................... 	switch (c) { 
*
0119:  MOVF   51,W
011A:  XORLW  0C
011B:  BTFSC  03.2
011C:  GOTO   127
011D:  XORLW  06
011E:  BTFSC  03.2
011F:  GOTO   12F
0120:  XORLW  07
0121:  BTFSC  03.2
0122:  GOTO   12F
0123:  XORLW  05
0124:  BTFSC  03.2
0125:  GOTO   143
0126:  GOTO   148
.................... 	case '\f': 
.................... 		lcd_envia_byte(0, 1);     // 0,1 
0127:  CLRF   55
0128:  MOVLW  01
0129:  MOVWF  56
012A:  CALL   0B4
.................... 		delay_ms(2); 
012B:  MOVLW  02
012C:  MOVWF  57
012D:  CALL   078
.................... 		break; 
012E:  GOTO   14D
.................... 	case '\n': 
.................... 	case '\r': 
.................... 		lcd_pos_xy(1, 2);      // 1,2  COLUNA,LINHA 
012F:  MOVLW  01
0130:  MOVWF  52
0131:  MOVLW  02
0132:  MOVWF  53
.................... 		break; 
*
0142:  GOTO   14D
.................... 	case '\b': 
.................... 		lcd_envia_byte(0, 0x10); 
0143:  CLRF   55
0144:  MOVLW  10
0145:  MOVWF  56
0146:  CALL   0B4
.................... 		break; 
0147:  GOTO   14D
.................... 	default: 
.................... 		lcd_envia_byte(1, c); 
0148:  MOVLW  01
0149:  MOVWF  55
014A:  MOVF   51,W
014B:  MOVWF  56
014C:  CALL   0B4
.................... 		break; 
.................... 	} 
.................... } 
014D:  RETURN
....................  
.................... void lcd_init() { 
....................  
.................... 	int conta; 
....................  
.................... 	output_low(rs); 
*
00D9:  BSF    03.5
00DA:  BCF    06.4
00DB:  BCF    03.5
00DC:  BCF    06.4
.................... 	output_low(en); 
00DD:  BSF    03.5
00DE:  BCF    06.5
00DF:  BCF    03.5
00E0:  BCF    06.5
.................... 	output_low(d4); 
00E1:  BSF    03.5
00E2:  BCF    05.6
00E3:  BCF    03.5
00E4:  BCF    05.6
.................... 	output_low(d5); 
00E5:  BSF    03.5
00E6:  BCF    05.7
00E7:  BCF    03.5
00E8:  BCF    05.7
.................... 	output_low(d6); 
00E9:  BSF    03.5
00EA:  BCF    05.0
00EB:  BCF    03.5
00EC:  BCF    05.0
.................... 	output_low(d7); 
00ED:  BSF    03.5
00EE:  BCF    05.1
00EF:  BCF    03.5
00F0:  BCF    05.1
....................  
.................... 	delay_ms(15); 
00F1:  MOVLW  0F
00F2:  MOVWF  57
00F3:  CALL   078
....................  
.................... 	for (conta = 1; conta <= 3; conta++) { 
00F4:  MOVLW  01
00F5:  MOVWF  4F
00F6:  MOVF   4F,W
00F7:  SUBLW  03
00F8:  BTFSS  03.0
00F9:  GOTO   102
.................... 		lcd_cmd(0x03); 
00FA:  MOVLW  03
00FB:  MOVWF  58
00FC:  CALL   08D
.................... 		delay_ms(5); 
00FD:  MOVLW  05
00FE:  MOVWF  57
00FF:  CALL   078
.................... 	} 
0100:  INCF   4F,F
0101:  GOTO   0F6
.................... 	lcd_cmd(0x02);           //escreve comando para interface de 4 vias de dados 
0102:  MOVLW  02
0103:  MOVWF  58
0104:  CALL   08D
.................... 	lcd_envia_byte(0, 0x28); //escreve comando informando lcd de 2 linhas (5x7) em 4bits 
0105:  CLRF   55
0106:  MOVLW  28
0107:  MOVWF  56
0108:  CALL   0B4
.................... 	lcd_envia_byte(0, 0x0c); //escreve comando para limpar todo o display 
0109:  CLRF   55
010A:  MOVLW  0C
010B:  MOVWF  56
010C:  CALL   0B4
.................... 	lcd_envia_byte(0, 0x01); //escreve comando para ligar o display **com cursor piscante 
010D:  CLRF   55
010E:  MOVLW  01
010F:  MOVWF  56
0110:  CALL   0B4
.................... 	lcd_envia_byte(0, 0x06); //escreve comando para incrementar automaticamente á direita 
0111:  CLRF   55
0112:  MOVLW  06
0113:  MOVWF  56
0114:  CALL   0B4
.................... 	delay_ms(5); 
0115:  MOVLW  05
0116:  MOVWF  57
0117:  CALL   078
.................... } 
0118:  GOTO   19B (RETURN)
....................  
....................  
....................  
.................... int buffer[34]; 
.................... int col, i, j; 
.................... short write = 1; 
.................... int line = 0; 
....................  
.................... #INT_TIMER1 
.................... void isr_timer1() { 
....................    clear_interrupt(INT_TIMER1); 
*
0046:  BCF    0C.0
....................    setup_timer_1(T1_DISABLED); 
0047:  CLRF   10
....................    write = 1; 
0048:  BSF    4D.0
.................... } 
....................  
0049:  BCF    0C.0
004A:  BCF    0A.3
004B:  GOTO   026
.................... #int_rda 
.................... void serial_isr() { 
....................    clear_interrupt(INT_RDA); 
004C:  BCF    0C.5
....................    if (line < 31) { 
004D:  MOVF   4E,W
004E:  SUBLW  1E
004F:  BTFSS  03.0
0050:  GOTO   060
....................       buffer[line++] = getc(); 
0051:  MOVF   4E,W
0052:  INCF   4E,F
0053:  ADDLW  28
0054:  MOVWF  04
0055:  BCF    03.7
0056:  BTFSS  0C.5
0057:  GOTO   056
0058:  MOVF   1A,W
0059:  MOVWF  00
....................       buffer[line] = '\0'; 
005A:  MOVLW  28
005B:  ADDWF  4E,W
005C:  MOVWF  04
005D:  BCF    03.7
005E:  CLRF   00
....................    } else { 
005F:  GOTO   071
....................       strcpy(buffer, ""); 
0060:  CLRF   59
0061:  CLRF   5A
0062:  MOVLW  28
0063:  MOVWF  04
0064:  BCF    03.7
0065:  MOVF   59,W
0066:  ADDWF  04,F
0067:  MOVF   5A,W
0068:  CALL   037
0069:  MOVWF  00
006A:  IORLW  00
006B:  BTFSC  03.2
006C:  GOTO   070
006D:  INCF   5A,F
006E:  INCF   59,F
006F:  GOTO   062
....................       line = 0; 
0070:  CLRF   4E
....................    } 
....................    set_timer1(0); 
0071:  CLRF   0F
0072:  CLRF   0E
....................    setup_timer_1(T1_INTERNAL | T1_DIV_BY_1); 
0073:  MOVLW  85
0074:  MOVWF  10
.................... } 
....................  
0075:  BCF    0C.5
0076:  BCF    0A.3
0077:  GOTO   026
.................... int main(void) { 
*
014E:  MOVF   03,W
014F:  ANDLW  1F
0150:  MOVWF  03
0151:  MOVLW  57
0152:  MOVWF  77
0153:  MOVLW  20
0154:  MOVWF  04
0155:  BCF    03.7
0156:  CLRF   00
0157:  INCF   04,F
0158:  DECFSZ 77,F
0159:  GOTO   156
015A:  CLRF   78
015B:  CLRF   79
015C:  CLRF   7A
015D:  CLRF   7B
015E:  CLRF   7C
015F:  CLRF   7D
0160:  CLRF   7E
0161:  MOVLW  50
0162:  MOVWF  77
0163:  MOVLW  A0
0164:  MOVWF  04
0165:  BCF    03.7
0166:  CLRF   00
0167:  INCF   04,F
0168:  DECFSZ 77,F
0169:  GOTO   166
016A:  MOVLW  30
016B:  MOVWF  77
016C:  MOVLW  20
016D:  MOVWF  04
016E:  BSF    03.7
016F:  CLRF   00
0170:  INCF   04,F
0171:  DECFSZ 77,F
0172:  GOTO   16F
0173:  BCF    03.7
0174:  CLRF   20
0175:  CLRF   04
0176:  BCF    03.7
0177:  MOVLW  1F
0178:  ANDWF  03,F
0179:  BSF    03.5
017A:  BSF    0E.3
017B:  MOVLW  19
017C:  MOVWF  19
017D:  MOVLW  A6
017E:  MOVWF  18
017F:  MOVLW  90
0180:  BCF    03.5
0181:  MOVWF  18
0182:  BSF    4D.0
0183:  CLRF   4E
0184:  MOVLW  07
0185:  MOVWF  1F
....................  
....................    output_low(PIN_B3); 
0186:  BSF    03.5
0187:  BCF    06.3
0188:  BCF    03.5
0189:  BCF    06.3
....................    strcpy(buffer, "Done2"); 
018A:  CLRF   4F
018B:  CLRF   50
018C:  MOVLW  28
018D:  MOVWF  04
018E:  BCF    03.7
018F:  MOVF   4F,W
0190:  ADDWF  04,F
0191:  MOVF   50,W
0192:  CALL   03C
0193:  MOVWF  00
0194:  IORLW  00
0195:  BTFSC  03.2
0196:  GOTO   19A
0197:  INCF   50,F
0198:  INCF   4F,F
0199:  GOTO   18C
....................    lcd_init(); 
019A:  GOTO   0D9
....................    delay_ms(150); 
019B:  MOVLW  96
019C:  MOVWF  57
019D:  CALL   078
....................  
....................    clear_interrupt(INT_TIMER1); 
019E:  BCF    0C.0
....................    enable_interrupts(INT_RDA); 
019F:  BSF    03.5
01A0:  BSF    0C.5
....................    enable_interrupts(INT_TIMER1); 
01A1:  BSF    0C.0
....................    enable_interrupts(GLOBAL); 
01A2:  MOVLW  C0
01A3:  BCF    03.5
01A4:  IORWF  0B,F
....................  
....................    while (TRUE) { 
....................       if (write) { 
01A5:  BTFSS  4D.0
01A6:  GOTO   1C4
....................          printf(lcd, "\f%s", buffer); 
01A7:  MOVLW  0C
01A8:  MOVWF  51
01A9:  CALL   119
01AA:  MOVLW  28
01AB:  MOVWF  04
01AC:  BCF    03.7
01AD:  MOVLW  00
01AE:  IORWF  00,W
01AF:  BTFSC  03.2
01B0:  GOTO   1C1
01B1:  CLRF   50
01B2:  MOVF   04,W
01B3:  MOVWF  4F
01B4:  BCF    50.0
01B5:  BTFSC  03.7
01B6:  BSF    50.0
01B7:  MOVF   00,W
01B8:  MOVWF  51
01B9:  CALL   119
01BA:  MOVF   4F,W
01BB:  MOVWF  04
01BC:  BCF    03.7
01BD:  BTFSC  50.0
01BE:  BSF    03.7
01BF:  INCF   04,F
01C0:  GOTO   1AD
....................          buffer[0] = '\0'; 
01C1:  CLRF   28
....................          line = 0; 
01C2:  CLRF   4E
....................          write = 0; 
01C3:  BCF    4D.0
....................       } 
....................    } 
01C4:  GOTO   1A5
....................    return 0; 
01C5:  MOVLW  00
01C6:  MOVWF  78
.................... } 
01C7:  SLEEP

Configuration Fuses:
   Word  1: 3F18   NOWDT NOPUT INTRC_IO NOMCLR NOBROWNOUT NOLVP NOCPD NOPROTECT
