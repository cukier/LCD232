CCS PCM C Compiler, Version 4.140, 21898               19-jul-13 14:41

               Filename:   E:\Eletronica\Projetos\LCD232\lcd232.lst

               ROM used:   457 words (22%)
                           Largest free fragment is 1591
               RAM used:   80 (36%) at main() level
                           90 (40%) worst case
               Stack:     5 worst case (3 in main + 2 for interrupts)

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   153
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   7F,W
0009:  MOVWF  20
000A:  MOVF   0A,W
000B:  MOVWF  27
000C:  CLRF   0A
000D:  SWAPF  20,F
000E:  MOVF   04,W
000F:  MOVWF  22
0010:  MOVF   77,W
0011:  MOVWF  23
0012:  MOVF   78,W
0013:  MOVWF  24
0014:  MOVF   79,W
0015:  MOVWF  25
0016:  MOVF   7A,W
0017:  MOVWF  26
0018:  BCF    03.7
0019:  BCF    03.5
001A:  MOVLW  8C
001B:  MOVWF  04
001C:  BTFSS  00.5
001D:  GOTO   020
001E:  BTFSC  0C.5
001F:  GOTO   04B
0020:  MOVLW  8C
0021:  MOVWF  04
0022:  BTFSS  00.0
0023:  GOTO   026
0024:  BTFSC  0C.0
0025:  GOTO   045
0026:  MOVF   22,W
0027:  MOVWF  04
0028:  MOVF   23,W
0029:  MOVWF  77
002A:  MOVF   24,W
002B:  MOVWF  78
002C:  MOVF   25,W
002D:  MOVWF  79
002E:  MOVF   26,W
002F:  MOVWF  7A
0030:  MOVF   27,W
0031:  MOVWF  0A
0032:  SWAPF  21,W
0033:  MOVWF  03
0034:  SWAPF  7F,F
0035:  SWAPF  7F,W
0036:  RETFIE
.................... /* 
....................  * lcd232.c 
....................  * 
....................  *  Created on: 01/10/2012 
....................  *      Author: cuki 
....................  */ 
....................  
.................... #include<16F628A.h> 
.................... //////// Standard Header file for the PIC16F628A device //////////////// 
.................... #device PIC16F628A 
.................... #list 
....................  
.................... #zero_ram 
....................  
.................... #fuses NOWDT,NOPUT,INTRC_IO,NOMCLR,NOBROWNOUT,NOLVP,NOCPD,NOPROTECT 
.................... #use delay(clock=4MHz) 
*
0077:  MOVLW  71
0078:  MOVWF  04
0079:  BCF    03.7
007A:  MOVF   00,W
007B:  BTFSC  03.2
007C:  GOTO   08B
007D:  MOVLW  01
007E:  MOVWF  78
007F:  CLRF   77
0080:  DECFSZ 77,F
0081:  GOTO   080
0082:  DECFSZ 78,F
0083:  GOTO   07F
0084:  MOVLW  4A
0085:  MOVWF  77
0086:  DECFSZ 77,F
0087:  GOTO   086
0088:  GOTO   089
0089:  DECFSZ 00,F
008A:  GOTO   07D
008B:  RETURN
.................... #use rs232(baud=9600,xmit=pin_b2,rcv=pin_b1) 
....................  
.................... #include"lcd_4b.c" 
.................... #define rs pin_b4 
.................... #define en pin_b5 
.................... #define d4 pin_a6 
.................... #define d5 pin_a7 
.................... #define d6 pin_a0 
.................... #define d7 pin_a1 
....................  
.................... void lcd_cmd(int cmd) { 
.................... 	output_bit(d4, bit_test(cmd, 0)); 
008C:  BTFSC  72.0
008D:  GOTO   090
008E:  BCF    05.6
008F:  GOTO   091
0090:  BSF    05.6
0091:  BSF    03.5
0092:  BCF    05.6
.................... 	output_bit(d5, bit_test(cmd, 1)); 
0093:  BTFSC  72.1
0094:  GOTO   099
0095:  BCF    03.5
0096:  BCF    05.7
0097:  GOTO   09B
0098:  BSF    03.5
0099:  BCF    03.5
009A:  BSF    05.7
009B:  BSF    03.5
009C:  BCF    05.7
.................... 	output_bit(d6, bit_test(cmd, 2)); 
009D:  BTFSC  72.2
009E:  GOTO   0A3
009F:  BCF    03.5
00A0:  BCF    05.0
00A1:  GOTO   0A5
00A2:  BSF    03.5
00A3:  BCF    03.5
00A4:  BSF    05.0
00A5:  BSF    03.5
00A6:  BCF    05.0
.................... 	output_bit(d7, bit_test(cmd, 3)); 
00A7:  BTFSC  72.3
00A8:  GOTO   0AD
00A9:  BCF    03.5
00AA:  BCF    05.1
00AB:  GOTO   0AF
00AC:  BSF    03.5
00AD:  BCF    03.5
00AE:  BSF    05.1
00AF:  BSF    03.5
00B0:  BCF    05.1
.................... 	output_high(en); 
00B1:  BCF    06.5
00B2:  BCF    03.5
00B3:  BSF    06.5
.................... 	output_low(en); 
00B4:  BSF    03.5
00B5:  BCF    06.5
00B6:  BCF    03.5
00B7:  BCF    06.5
.................... } 
00B8:  RETURN
....................  
.................... void lcd_envia_byte(short endereco, int dado) { 
.................... 	output_low(rs); 
00B9:  BSF    03.5
00BA:  BCF    06.4
00BB:  BCF    03.5
00BC:  BCF    06.4
.................... 	output_bit(rs, endereco); 
00BD:  MOVF   6F,F
00BE:  BTFSS  03.2
00BF:  GOTO   0C2
00C0:  BCF    06.4
00C1:  GOTO   0C3
00C2:  BSF    06.4
00C3:  BSF    03.5
00C4:  BCF    06.4
.................... 	delay_us(100); 
00C5:  MOVLW  20
00C6:  MOVWF  77
00C7:  DECFSZ 77,F
00C8:  GOTO   0C7
00C9:  GOTO   0CA
00CA:  NOP
.................... 	output_low(en); 
00CB:  BCF    06.5
00CC:  BCF    03.5
00CD:  BCF    06.5
.................... 	lcd_cmd(dado >> 4); 
00CE:  SWAPF  70,W
00CF:  MOVWF  71
00D0:  MOVLW  0F
00D1:  ANDWF  71,F
00D2:  MOVF   71,W
00D3:  MOVWF  72
00D4:  CALL   08C
.................... 	lcd_cmd(dado & 0x0f); 
00D5:  MOVF   70,W
00D6:  ANDLW  0F
00D7:  MOVWF  71
00D8:  MOVWF  72
00D9:  CALL   08C
.................... 	delay_ms(1); 
00DA:  MOVLW  01
00DB:  MOVWF  71
00DC:  CALL   077
.................... } 
00DD:  RETURN
....................  
.................... void lcd_pos_xy(byte x, byte y) { 
.................... 	byte endereco; 
.................... 	if (y != 1) 
*
0138:  DECFSZ 6D,W
0139:  GOTO   13B
013A:  GOTO   13E
.................... 		endereco = 0xc0; 
013B:  MOVLW  C0
013C:  MOVWF  6E
.................... 	else 
013D:  GOTO   140
.................... 		endereco = 0x80; 
013E:  MOVLW  80
013F:  MOVWF  6E
.................... 	endereco += x - 1; 
0140:  MOVLW  01
0141:  SUBWF  6C,W
0142:  ADDWF  6E,F
.................... 	lcd_envia_byte(0, endereco); 
0143:  CLRF   6F
0144:  MOVF   6E,W
0145:  MOVWF  70
0146:  CALL   0B9
.................... } 
....................  
.................... void lcd(char c) { 
.................... 	switch (c) { 
*
011E:  MOVF   6B,W
011F:  XORLW  0C
0120:  BTFSC  03.2
0121:  GOTO   12C
0122:  XORLW  06
0123:  BTFSC  03.2
0124:  GOTO   134
0125:  XORLW  07
0126:  BTFSC  03.2
0127:  GOTO   134
0128:  XORLW  05
0129:  BTFSC  03.2
012A:  GOTO   148
012B:  GOTO   14D
.................... 	case '\f': 
.................... 		lcd_envia_byte(0, 1);     // 0,1 
012C:  CLRF   6F
012D:  MOVLW  01
012E:  MOVWF  70
012F:  CALL   0B9
.................... 		delay_ms(2); 
0130:  MOVLW  02
0131:  MOVWF  71
0132:  CALL   077
.................... 		break; 
0133:  GOTO   152
.................... 	case '\n': 
.................... 	case '\r': 
.................... 		lcd_pos_xy(1, 2);      // 1,2  COLUNA,LINHA 
0134:  MOVLW  01
0135:  MOVWF  6C
0136:  MOVLW  02
0137:  MOVWF  6D
.................... 		break; 
*
0147:  GOTO   152
.................... 	case '\b': 
.................... 		lcd_envia_byte(0, 0x10); 
0148:  CLRF   6F
0149:  MOVLW  10
014A:  MOVWF  70
014B:  CALL   0B9
.................... 		break; 
014C:  GOTO   152
.................... 	default: 
.................... 		lcd_envia_byte(1, c); 
014D:  MOVLW  01
014E:  MOVWF  6F
014F:  MOVF   6B,W
0150:  MOVWF  70
0151:  CALL   0B9
.................... 		break; 
.................... 	} 
.................... } 
0152:  RETURN
....................  
.................... void lcd_init() { 
....................  
.................... 	int conta; 
....................  
.................... 	output_low(rs); 
*
00DE:  BSF    03.5
00DF:  BCF    06.4
00E0:  BCF    03.5
00E1:  BCF    06.4
.................... 	output_low(en); 
00E2:  BSF    03.5
00E3:  BCF    06.5
00E4:  BCF    03.5
00E5:  BCF    06.5
.................... 	output_low(d4); 
00E6:  BSF    03.5
00E7:  BCF    05.6
00E8:  BCF    03.5
00E9:  BCF    05.6
.................... 	output_low(d5); 
00EA:  BSF    03.5
00EB:  BCF    05.7
00EC:  BCF    03.5
00ED:  BCF    05.7
.................... 	output_low(d6); 
00EE:  BSF    03.5
00EF:  BCF    05.0
00F0:  BCF    03.5
00F1:  BCF    05.0
.................... 	output_low(d7); 
00F2:  BSF    03.5
00F3:  BCF    05.1
00F4:  BCF    03.5
00F5:  BCF    05.1
....................  
.................... 	delay_ms(15); 
00F6:  MOVLW  0F
00F7:  MOVWF  71
00F8:  CALL   077
....................  
.................... 	for (conta = 1; conta <= 3; conta++) { 
00F9:  MOVLW  01
00FA:  MOVWF  69
00FB:  MOVF   69,W
00FC:  SUBLW  03
00FD:  BTFSS  03.0
00FE:  GOTO   107
.................... 		lcd_cmd(0x03); 
00FF:  MOVLW  03
0100:  MOVWF  72
0101:  CALL   08C
.................... 		delay_ms(5); 
0102:  MOVLW  05
0103:  MOVWF  71
0104:  CALL   077
.................... 	} 
0105:  INCF   69,F
0106:  GOTO   0FB
.................... 	lcd_cmd(0x02);           //escreve comando para interface de 4 vias de dados 
0107:  MOVLW  02
0108:  MOVWF  72
0109:  CALL   08C
.................... 	lcd_envia_byte(0, 0x28); //escreve comando informando lcd de 2 linhas (5x7) em 4bits 
010A:  CLRF   6F
010B:  MOVLW  28
010C:  MOVWF  70
010D:  CALL   0B9
.................... 	lcd_envia_byte(0, 0x0c); //escreve comando para limpar todo o display 
010E:  CLRF   6F
010F:  MOVLW  0C
0110:  MOVWF  70
0111:  CALL   0B9
.................... 	lcd_envia_byte(0, 0x01); //escreve comando para ligar o display **com cursor piscante 
0112:  CLRF   6F
0113:  MOVLW  01
0114:  MOVWF  70
0115:  CALL   0B9
.................... 	lcd_envia_byte(0, 0x06); //escreve comando para incrementar automaticamente á direita 
0116:  CLRF   6F
0117:  MOVLW  06
0118:  MOVWF  70
0119:  CALL   0B9
.................... 	delay_ms(5); 
011A:  MOVLW  05
011B:  MOVWF  71
011C:  CALL   077
.................... } 
011D:  GOTO   19C (RETURN)
....................  
....................  
....................  
.................... int buffer[60]; 
.................... int col, i, j; 
.................... short write = 1; 
.................... int line = 0; 
....................  
.................... #INT_TIMER1 
.................... void isr_timer1() { 
.................... 	clear_interrupt(INT_TIMER1); 
*
0045:  BCF    0C.0
.................... 	setup_timer_1(T1_DISABLED); 
0046:  CLRF   10
.................... 	write = 1; 
0047:  BSF    67.0
.................... } 
....................  
0048:  BCF    0C.0
0049:  BCF    0A.3
004A:  GOTO   026
.................... #int_rda 
.................... void serial_isr() { 
.................... 	clear_interrupt(INT_RDA); 
004B:  BCF    0C.5
.................... 	if (line < 31) { 
004C:  MOVF   68,W
004D:  SUBLW  1E
004E:  BTFSS  03.0
004F:  GOTO   05F
.................... 		buffer[line++] = getc(); 
0050:  MOVF   68,W
0051:  INCF   68,F
0052:  ADDLW  28
0053:  MOVWF  04
0054:  BCF    03.7
0055:  BTFSS  0C.5
0056:  GOTO   055
0057:  MOVF   1A,W
0058:  MOVWF  00
.................... 		buffer[line] = '\0'; 
0059:  MOVLW  28
005A:  ADDWF  68,W
005B:  MOVWF  04
005C:  BCF    03.7
005D:  CLRF   00
.................... 	} else { 
005E:  GOTO   070
.................... 		strcpy(buffer, ""); 
005F:  CLRF   73
0060:  CLRF   74
0061:  MOVLW  28
0062:  MOVWF  04
0063:  BCF    03.7
0064:  MOVF   73,W
0065:  ADDWF  04,F
0066:  MOVF   74,W
0067:  CALL   037
0068:  MOVWF  00
0069:  IORLW  00
006A:  BTFSC  03.2
006B:  GOTO   06F
006C:  INCF   74,F
006D:  INCF   73,F
006E:  GOTO   061
.................... 		line = 0; 
006F:  CLRF   68
.................... 	} 
.................... 	set_timer1(0); 
0070:  CLRF   0F
0071:  CLRF   0E
.................... 	setup_timer_1(T1_INTERNAL | T1_DIV_BY_1); 
0072:  MOVLW  85
0073:  MOVWF  10
.................... } 
....................  
0074:  BCF    0C.5
0075:  BCF    0A.3
0076:  GOTO   026
.................... int main(void) { 
*
0153:  MOVF   03,W
0154:  ANDLW  1F
0155:  MOVWF  03
0156:  MOVLW  57
0157:  MOVWF  77
0158:  MOVLW  20
0159:  MOVWF  04
015A:  BCF    03.7
015B:  CLRF   00
015C:  INCF   04,F
015D:  DECFSZ 77,F
015E:  GOTO   15B
015F:  CLRF   78
0160:  CLRF   79
0161:  CLRF   7A
0162:  CLRF   7B
0163:  CLRF   7C
0164:  CLRF   7D
0165:  CLRF   7E
0166:  MOVLW  50
0167:  MOVWF  77
0168:  MOVLW  A0
0169:  MOVWF  04
016A:  BCF    03.7
016B:  CLRF   00
016C:  INCF   04,F
016D:  DECFSZ 77,F
016E:  GOTO   16B
016F:  MOVLW  30
0170:  MOVWF  77
0171:  MOVLW  20
0172:  MOVWF  04
0173:  BSF    03.7
0174:  CLRF   00
0175:  INCF   04,F
0176:  DECFSZ 77,F
0177:  GOTO   174
0178:  BCF    03.7
0179:  CLRF   20
017A:  CLRF   04
017B:  BCF    03.7
017C:  MOVLW  1F
017D:  ANDWF  03,F
017E:  BSF    03.5
017F:  BSF    0E.3
0180:  MOVLW  19
0181:  MOVWF  19
0182:  MOVLW  A6
0183:  MOVWF  18
0184:  MOVLW  90
0185:  BCF    03.5
0186:  MOVWF  18
0187:  BSF    67.0
0188:  CLRF   68
0189:  MOVLW  07
018A:  MOVWF  1F
....................  
.................... 	strcpy(buffer, "Done"); 
018B:  CLRF   69
018C:  CLRF   6A
018D:  MOVLW  28
018E:  MOVWF  04
018F:  BCF    03.7
0190:  MOVF   69,W
0191:  ADDWF  04,F
0192:  MOVF   6A,W
0193:  CALL   03C
0194:  MOVWF  00
0195:  IORLW  00
0196:  BTFSC  03.2
0197:  GOTO   19B
0198:  INCF   6A,F
0199:  INCF   69,F
019A:  GOTO   18D
.................... 	lcd_init(); 
019B:  GOTO   0DE
.................... 	delay_ms(15); 
019C:  MOVLW  0F
019D:  MOVWF  71
019E:  CALL   077
....................  
.................... 	clear_interrupt(INT_TIMER1); 
019F:  BCF    0C.0
.................... 	enable_interrupts(INT_RDA); 
01A0:  BSF    03.5
01A1:  BSF    0C.5
.................... 	enable_interrupts(INT_TIMER1); 
01A2:  BSF    0C.0
.................... 	enable_interrupts(GLOBAL); 
01A3:  MOVLW  C0
01A4:  BCF    03.5
01A5:  IORWF  0B,F
....................  
.................... 	while (TRUE) { 
.................... 		if (write) { 
01A6:  BTFSS  67.0
01A7:  GOTO   1C5
.................... 			printf(lcd, "\f%s", buffer); 
01A8:  MOVLW  0C
01A9:  MOVWF  6B
01AA:  CALL   11E
01AB:  MOVLW  28
01AC:  MOVWF  04
01AD:  BCF    03.7
01AE:  MOVLW  00
01AF:  IORWF  00,W
01B0:  BTFSC  03.2
01B1:  GOTO   1C2
01B2:  CLRF   6A
01B3:  MOVF   04,W
01B4:  MOVWF  69
01B5:  BCF    6A.0
01B6:  BTFSC  03.7
01B7:  BSF    6A.0
01B8:  MOVF   00,W
01B9:  MOVWF  6B
01BA:  CALL   11E
01BB:  MOVF   69,W
01BC:  MOVWF  04
01BD:  BCF    03.7
01BE:  BTFSC  6A.0
01BF:  BSF    03.7
01C0:  INCF   04,F
01C1:  GOTO   1AE
.................... 			buffer[0] = '\0'; 
01C2:  CLRF   28
.................... 			line = 0; 
01C3:  CLRF   68
.................... 			write = 0; 
01C4:  BCF    67.0
.................... 		} 
.................... 	} 
01C5:  GOTO   1A6
.................... 	return 0; 
01C6:  MOVLW  00
01C7:  MOVWF  78
.................... } 
01C8:  SLEEP

Configuration Fuses:
   Word  1: 3F18   NOWDT NOPUT INTRC_IO NOMCLR NOBROWNOUT NOLVP NOCPD NOPROTECT
